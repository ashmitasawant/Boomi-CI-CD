name: Deployment Pipeline

# Controls when the workflow will run
on:
  push:
    paths:
     - 'DeploymentConfiguration/ProcessDetails.HX_Demo.dev.json'
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  getProcessInfo:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    outputs:
      componentIds: ${{ steps.setProcessLevelInfo.outputs.componentIds }}
      packageVersions: ${{ steps.setProcessLevelInfo.outputs.packageVersions }}
      processNames: ${{steps.setProcessLevelInfo.outputs.processNames}}
      environmentName: ${{steps.setProcessLevelInfo.outputs.environmentName}}
      modes: ${{steps.setProcessLevelInfo.outputs.modes}}
      deploymentIds: ${{steps.setProcessLevelInfo.outputs.deploymentIds}}
      # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Process Info
        uses: actions/checkout@v2
      - id: setProcessLevelInfo
        run: |
            ProcessDetails=$(cat ./DeploymentConfiguration/ProcessDetails.HX_Demo.dev.json)
                      
            environmentName=$(echo ${ProcessDetails} | jq '.[] | .environmentName')
            echo $environmentName
            echo "::set-output name=environmentName::$environmentName"
            processName=$(echo ${ProcessDetails} | jq '.[] | .processDetails[].processName')
            componentID=$(echo  ${ProcessDetails} | jq '.[] | .processDetails[].componentID')
            packageVersion=$(echo  ${ProcessDetails} | jq '.[] | .processDetails[].packageVersion')
            mode=$(echo  ${ProcessDetails} | jq '.[] | .processDetails[].mode')
            deploymentID=$(echo  ${ProcessDetails} | jq '.[] | .processDetails[].deploymentID')
            
            ComponentsArray=$(echo $componentID)
            echo $ComponentsArray
            echo "::set-output name=componentIds::($ComponentsArray)"
            
            ProcessNamesArray=$(echo $processName)
            echo $ProcessNamesArray
            echo "::set-output name=processNames::($ProcessNamesArray)"
            
            PackageVersionArray=$(echo $packageVersion)
            echo $PackageVersionArray
            echo "::set-output name=packageVersions::($PackageVersionArray)"
            
            ModeArray=$(echo $mode)
            echo $ModeArray
            echo "::set-output name=modes::($ModeArray)"
            
            DeploymentsArray=$(echo $deploymentID)
            echo $DeploymentsArray
            echo "::set-output name=deploymentIds::($DeploymentsArray)"
            
  
    
  getEnvironmentInfo:
   runs-on: ubuntu-latest
   outputs:
     devEnvironmentId: ${{steps.setEnvironmentLevelInfo.outputs.devEnvironmentId}}
     devAtomId: ${{steps.setEnvironmentLevelInfo.outputs.devAtomId}}
     testEnvironmentId: ${{steps.setEnvironmentLevelInfo.outputs.testEnvironmentId}}
     testAtomId: ${{steps.setEnvironmentLevelInfo.outputs.testAtomId}}
   steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Process Info
        uses: actions/checkout@v2
      - id: setEnvironmentLevelInfo
        run: |
            DevEnvironmentDetails=$(cat ./EnvironmentConfiguration/Dev.Env.Config.json)
            devEnvironmentID=$(echo  ${DevEnvironmentDetails} | jq '.[] | .environmentId')
            echo $devEnvironmentID
            echo "::set-output name=devEnvironmentId::$devEnvironmentID"
            
            devAtomID=$(echo ${DevEnvironmentDetails} | jq '.[] | .atomId')
            echo $devAtomID
            echo "::set-output name=devAtomId::$devAtomID"
            
            TestEnvironmentDetails=$(cat ./EnvironmentConfiguration/Test.Env.Config.json)
            testEnvironmentID=$(echo  ${TestEnvironmentDetails} | jq '.[] | .environmentId')
            echo $testEnvironmentID
            echo "::set-output name=testEnvironmentId::$testEnvironmentID"
            
            testAtomID=$(echo ${TestEnvironmentDetails} | jq '.[] | .atomId')
            echo $testAtomID
            echo "::set-output name=testAtomId::$testAtomID"
  
           
  createPackage:
   environment: Dev
   env: 
      BOOMI_AUTHORIZATION: ${{ secrets.BOOMI_AUTHORIZATION }}
   runs-on: ubuntu-latest   
   outputs:
    packageId: ${{ steps.packageCreation.outputs.packageIds }}
   needs: getProcessInfo
   steps:
      - uses: actions/checkout@v2
      - name: Package Creation
        id: packageCreation
        run: |
              components=${{needs.getProcessInfo.outputs.componentIds}}
              packageVersions=${{needs.getProcessInfo.outputs.packageVersions}}
              modes=${{needs.getProcessInfo.outputs.modes}} 
              
              for ((i=0;i<${#components[@]};i++))
              do
                  if [ ${modes[$i]} != "re-deploy" ] && [ ${modes[$i]} != "undeploy" ] 
                  then
                      CODE=`curl  --request POST \
                                   --header 'authorization: ${{env.BOOMI_AUTHORIZATION}}' \
                                   --header 'content-type: application/json' \
                                   --header 'accept: application/json' \
                                   --url 'https://api.boomi.com/api/rest/v1/trainingashmitasawant-D9P8J7/PackagedComponent' \
                                   --data '{"componentId": "'${components[$i]}'","packageVersion":"'${packageVersions[$i]}'", "notes":"Package for deployment" }'`
                                   echo $CODE
                                   packageIds=$(echo ${CODE} | jq '.packageId')
                                   packageIdsArray+="$packageIds "
                  fi
              done              
              echo "::set-output name=packageIds::$packageIdsArray"
              
              
  deployPackage: 
   environment: Dev
   env: 
      BOOMI_AUTHORIZATION: ${{ secrets.BOOMI_AUTHORIZATION }}
   runs-on: ubuntu-latest    
   needs: [createPackage,getProcessInfo,getEnvironmentInfo]
   steps:   
     - uses: actions/checkout@v2
     - name: Package Deploy
       id: packageDeploy
       run: |
             envName=${{needs.getProcessInfo.outputs.environmentName}}
             echo $envName
             modes=${{needs.getProcessInfo.outputs.modes}}
             
             if [ ${modes[$i]} == "deploy" ]
             then 
                packageIds=(${{needs.createPackage.outputs.packageId}})
             else
                ProcessDetails=$(cat ./DeploymentConfiguration/ProcessDetails.HX_Demo.dev.json)
                packageIds="("$(echo ${ProcessDetails} | jq '.[] | .processDetails[].packageId')")"
             fi
             echo $packageIds
             echo ${packageIds[1]}
             
             for ((i=0;i<${#packageIds[@]};i++))
               do
                 if [ $envName == "Development" ] && [ ${modes[$i]} == "deploy" ] 
                 then
                     envId=${{needs.getEnvironmentInfo.outputs.devEnvironmentId}}
                     CODE=`curl  --request POST \
                               --header 'authorization: ${{env.BOOMI_AUTHORIZATION}}' \
                               --header 'content-type: application/json' \
                               --header 'accept: application/json' \
                               --url 'https://api.boomi.com/api/rest/v1/trainingashmitasawant-D9P8J7/DeployedPackage' \
                               --data '{"environmentId": "'$envId'","packageId": "'${packageIds[$i]}'"}'`
                               
                             
                               echo $CODE 
                              
                                   echo $CODE, >> DeploymentOutcomeDev/HXv1Demo.Dev.Outcome.json
                                   git config user.name ashmitasawant
                                   git config user.email ashmitasawant3@gmail.com
                                   git add .
                                   git commit -m "Published Changes"
                                   git config pull.rebase false
                                   git push --force origin main
                    fi
                    if [ $envName == "Development" ] && [ ${modes[$i]} == "re-deploy" ]  
                     then
                         envId=${{needs.getEnvironmentInfo.outputs.devEnvironmentId}}
                         echo "The env id is:" '"'$envId'"'
                         echo $i
                         echo "Package Ids are:" ${packageIds[$i]}
                         
                         CODE=`curl  --request POST \
                                   --header 'authorization: ${{env.BOOMI_AUTHORIZATION}}' \
                                   --header 'content-type: application/json' \
                                   --header 'accept: application/json' \
                                   --url 'https://api.boomi.com/api/rest/v1/trainingashmitasawant-D9P8J7/DeployedPackage' \
                                   --data '{"environmentId": '"'$envId'"',"packageId": '"'${packageIds[$i]}'"'}'`
                               
                               echo $CODE 
                              
                                 echo $CODE >> DeploymentOutcomeTest/HXv1Demo.Dev.Outcome.json
                                 git config user.name ashmitasawant
                                 git config user.email ashmitasawant3@gmail.com
                                 git add .
                                 git commit -m "Published Changes"
                                 git config pull.rebase false
                                 git push --force origin main
                         
                     fi 
               done                
                      
                           
  
  undeployPackage:
   environment: Dev
   env: 
      BOOMI_AUTHORIZATION: ${{ secrets.BOOMI_AUTHORIZATION }}
   runs-on: ubuntu-latest
   needs: [getProcessInfo,deployPackage]
   steps:
      - uses: actions/checkout@v2
      - name: Package Undeploy
        id: packageUndeploy
        run: |
              deployments=${{needs.getProcessInfo.outputs.deploymentIds}}
              modes=${{needs.getProcessInfo.outputs.modes}}
              for ((i=0;i<${#deployments[@]};i++))
                do
                  if [[ ${modes[$i]} == "undeploy" ]] && [[ $deployments != "" ]] 
                  then
                    CODE=`curl  --request DELETE \
                                   --header 'authorization: ${{env.BOOMI_AUTHORIZATION}}' \
                                   --header 'content-type: application/json' \
                                   --url 'https://api.boomi.com/api/rest/v1/trainingashmitasawant-D9P8J7/DeployedPackage/'${deployments[$i]}''`

                                   echo $CODE 
                  fi
                done
            
            
 
