name: Testing Pipeline

# Controls when the workflow will run
on:
  push:
    paths:
     - 'DevPayloads/Submission.Dev.json'
     - 'DevPayloads/Bind.Dev.json'
     - 'DevPayloads/Quote.Dev.json'
     
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
 getProcessInfo:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    outputs:
      processNames: ${{steps.setProcessLevelInfo.outputs.processNames}}
      
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Process Info
        uses: actions/checkout@v2
      - id: setProcessLevelInfo
        run: |
            ProcessDetails=$(cat ./DeploymentConfiguration/ProcessDetails.HX_Demo.dev.json)
                      
            processName=$(echo ${ProcessDetails} | jq '.[] | .processDetails[].processName')
                       
            ProcessNamesArray=$(echo $processName)
            echo $ProcessNamesArray
            echo "::set-output name=processNames::($ProcessNamesArray)"
            
            
 processExecution:
   environment: Dev
   env: 
      API_AUTHORIZATION: ${{ secrets.API_AUTHORIZATION }}
      BOOMI_AUTHORIZATION : ${{ secrets.BOOMI_AUTHORIZATION }}
      QUOTE_SUBMISSION : ${{ secrets.QUOTE_SUBMISSION }}
      QUOTE_BIND : ${{ secrets.QUOTE_BIND }}
   runs-on: ubuntu-latest
   needs: getProcessInfo
   steps:
      - name: Process Executions
        uses: actions/checkout@v2
        id: processExecutions
      - run: |
             SubmissionPayload=$(cat ./DevPayloads/Submission.Dev.json)
             echo $SubmissionPayload
             BindPayload=$(cat ./DevPayloads/Bind.Dev.json)
             echo $BindPayload
        
             processes=${{needs.getProcessInfo.outputs.processNames}}
             echo $processes
             if [[ ${processes[*]} =~ (^|[[:space:]])TestWS($|[[:space:]]) ]]; 
             then
                  processName="TestWS"
                  CODE=`curl -i \
                        -H "Accept: application/json" \
                        -H "Authorization: ${{env.API_AUTHORIZATION}}" \
                        -H "Content-Type:application/json" \
                        -X POST --data "$SubmissionPayload" "${{env.QUOTE_SUBMISSION}}"`
                        
                        if [[ $CODE == *"200"* ]]
                        then
                           echo "The process executed successfully"
                           
                              ProcessDetails=$(cat ./DeploymentConfiguration/ProcessDetails.HX_Demo.dev.json);
                              echo $ProcessDetails
                              indexValueOfProcess=$(echo  ${ProcessDetails} | jq '.[].processDetails| range(0;length) as $i | select(.[$i].processName== "'$processName'") | $i');
                              echo "Index value is:" $indexValueOfProcess
                              componentId=$(echo  ${ProcessDetails} | jq '.[] | .processDetails['$indexValueOfProcess'].componentID')
                              echo $componentId
                     
              
                        outcomeData=$(sed '$ s/.$//' DeploymentOutcomeDev/HXv1Demo.Dev.Outcome.json)
                        devOutcomeData=[$outcomeData]
                        indexValueOfComponentId="("$(echo  ${devOutcomeData} | jq '.| range(0;length) as $i | select(.[$i].componentId=='${componentId}' ) | $i')")"
                        IFS=$'\n'
                        HighestIndexValue=$(echo "${indexValueOfComponentId[*]}" | sort -nr | head -n1)
                        echo "Highest Index is:" $HighestIndexValue
                        getComponentIds="("$(echo ${devOutcomeData} | jq '.[] | .componentId')")"
                    
                        echo $getComponentIds
                        componentsCount="$( grep -o "$componentId" <<< ${getComponentIds[*]} | wc -w)"
                        echo $componentsCount

                        if [ $componentsCount == 1 ]
                        then
                           previousPackageId=null
                           echo $previousPackageId
                        else
                           previousPackageId=$(echo  ${devOutcomeData} | jq '.['$HighestIndexValue'-1] | .packageId')
                           echo $previousPackageId
                        fi
                        echo "PPP is:" $previousPackageId
                        deploymentInfo=$(echo  ${devOutcomeData} | jq '.['$HighestIndexValue']')
                        echo $deploymentInfo   

                        processComponentId=$(echo  ${devOutcomeData} | jq '.['$HighestIndexValue'] | .componentId')
                        echo $processComponentId
                        processPackageId=$(echo  ${devOutcomeData} | jq '.['$HighestIndexValue'] | .packageId')
                        processPackageVersion=$(echo  ${devOutcomeData} | jq '.['$HighestIndexValue'] | .packageVersion')
                        processComponentVersion=$(echo  ${devOutcomeData} | jq '.['$HighestIndexValue'] | .componentVersion')

                        processDeploymentId=$(echo  ${devOutcomeData} | jq '.['$HighestIndexValue'] | .deploymentId')
                        environmentId=$(echo  ${devOutcomeData} | jq '.['$HighestIndexValue'] | .environmentId')



                        echo $processPackageId
                        echo $processPackageVersion
                        echo $processComponentVersion
                        echo $previousPackageId
                        echo $processDeploymentId
                        echo $environmentId

                        createSuccessJson='{"processName":"'$processName'","processId":'$processComponentId',"packageId":'$processPackageId',"packageVersion":'$processPackageVersion',"componentVersion":'$processComponentVersion',"previousPackageId":'$previousPackageId',"deploymentId":'$processDeploymentId'}'

                                  echo $createSuccessJson, >> DeploymentOutcomeDev/HXv1Demo.Dev.SuccessTests.json
                                  git config user.name ashmitasawant
                                   git config user.email ashmitasawant3@gmail.com
                                   git add .
                                   git commit -m "Published Changes"
                                   git config pull.rebase false
                                   git push --force origin main
                               
                       elif [[ $CODE != *"200"* ]]
                                  then
                                     echo $CODE

                                        ProcessDetails=$(cat ./DeploymentConfiguration/ProcessDetails.HX_Demo.dev.json);
                                        echo $ProcessDetails
                                        indexValueOfProcess=$(echo  ${ProcessDetails} | jq '.[].processDetails| range(0;length) as $i | select(.[$i].processName== "'$processName'") | $i');
                                        echo "Index value is:" $indexValueOfProcess
                                        componentId=$(echo  ${ProcessDetails} | jq '.[] | .processDetails['$indexValueOfProcess'].componentID')
                                        echo $componentId

                                        outcomeData=$(sed '$ s/.$//' DeploymentOutcomeDev/HXv1Demo.Dev.Outcome.json)
                                        devOutcomeData=[$outcomeData]
                                        indexValueOfComponentId="("$(echo  ${devOutcomeData} | jq '.| range(0;length) as $i | select(.[$i].componentId=='${componentId}' ) | $i')")"
                                        IFS=$'\n'
                                        HighestIndexValue=$(echo "${indexValueOfComponentId[*]}" | sort -nr | head -n1)
                                        echo "Highest Index in Outcome file is:" $HighestIndexValue

                       fi
               fi
         
                    
