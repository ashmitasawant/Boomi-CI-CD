name: API Packaging and Deploying Pipeline

# Controls when the workflow will run
on:
  push:
    paths:
     - 'DeploymentConfiguration/ApiDetails.HX_Demo.dev.json'
  workflow_dispatch:
env: 
           BOOMI_ACCOUNTID: ${{secrets.BOOMI_ACCOUNTID}}
           ASHMITA_SAWANT_API_AUTH: ${{secrets.ASHMITA_SAWANT_API_AUTH}}
           ASHMITA_SAWANT_USERNAME: ${{secrets.ASHMITA_SAWANT_USERNAME}} 
           ASHMITA_SAWANT_EMAIL: ${{secrets.ASHMITA_SAWANT_EMAIL}}
jobs:
   getAPI_Details:
    runs-on: ubuntu-latest
    outputs:
      
      apiComponentIds: ${{ steps.setAPILevelInfo.outputs.apiComponentIds }}
      packageVersions: ${{ steps.setAPILevelInfo.outputs.packageVersions }}
      fileHoldersName: ${{steps.setAPILevelInfo.outputs.fileHoldersName}}
      processNames: ${{steps.setAPILevelInfo.outputs.processNames}}
      apiNames: ${{steps.setAPILevelInfo.outputs.apiNames}}
      environmentName: ${{steps.setAPILevelInfo.outputs.environmentName}}
      modes: ${{steps.setAPILevelInfo.outputs.modes}}
      deploymentIds: ${{steps.setAPILevelInfo.outputs.apiDeploymentIds}}
      uniqueKey: ${{steps.setAPILevelInfo.outputs.uniqueKey}} 
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get API Info
        uses: actions/checkout@v2
      - id: setAPILevelInfo
        run: |
              fileToRead=$(ls ./APIDeploymentConfiguration/)
              echo $fileToRead
              fileRead=$(cat ./APIDeploymentConfiguration/"$fileToRead")
              echo $fileRead
              arrIN=(${fileToRead//./ })
              uniqueKey=$(echo ${arrIN[1]})
              echo $uniqueKey
              echo "::set-output name=uniqueKey::$uniqueKey"
              
              fileHoldersName=$(git log -n 1 --pretty='format:%an' -- APIDeploymentConfiguration/"$fileToRead")
              echo "File Committer's name is:" $fileHoldersName
              echo "::set-output name=fileHoldersName::'$fileHoldersName'"
              
               if [[ $fileHoldersName == "Ashmita Sawant" ]]
              then
                username=$ASHMITA_SAWANT_USERNAME
                email=$ASHMITA_SAWANT_EMAIL
              elif [[ $fileHoldersName == "Lalit Karpenter" ]]
              then
                   username=$LALIT_KARPENTER_USERNAME
                   email=$LALIT_KARPENTER_EMAIL
              elif [[ $fileHoldersName == "Kartik Dashora" ]]
              then
                   username=$KARTIK_DASHORA_USERNAME
                   email=$KARTIK_DASHORA_EMAIL
              elif [[ $fileHoldersName == "Lalit Kumawat" ]]
              then
                   username=$LALIT_KUMAWAT_USERNAME
                   email=$LALIT_KUMAWAT_EMAIL
              elif [[ $fileHoldersName == "Sanskriti Sharma" ]]
              then
                   username=$SANSKRITI_SHARMA_USERNAME
                   email=$SANSKRITI_SHARMA_EMAIL
              else 
                   username=null
                   email=null
              fi
              echo $username
              echo $email
              
              echo $fileRead >> APIsArchive/ARC_"$fileToRead"
                 git config user.name ashmitasawant
                 git config user.email ashmitasawant3@gmail.com
                 git add .
                 git commit -m "Published Changes"
                 git config pull.rebase false
                 git push --force origin main
                 
              environmentName=$(echo ${fileRead} | jq '.[] | .environmentName')
              echo $environmentName
              echo "::set-output name=environmentName::$environmentName"
              
              
              processName=$(echo ${fileRead} | jq '.[] | .apiDetails[].processName')
              apiName=$(echo ${fileRead} | jq '.[] | .apiDetails[].apiName')
              apiComponentID=$(echo  ${fileRead} | jq '.[] | .apiDetails[].apiComponentID')
              packageVersion=$(echo  ${fileRead} | jq '.[] | .apiDetails[].packageVersion')
              mode=$(echo  ${fileRead} | jq '.[] | .apiDetails[].mode')
              deploymentID=$(echo  ${fileRead} | jq '.[] | .apiDetails[].deploymentID')
              
                          
              APIComponentsArray=$(echo $apiComponentID)
              echo $APIComponentsArray
              echo "::set-output name=apiComponentIds::($APIComponentsArray)"
              
              APINamesArray=$(echo $apiName)
              echo $APINamesArray
              echo "::set-output name=apiNames::($APINamesArray)"
              
              ProcessNamesArray=$(echo $processName)
              echo $ProcessNamesArray
              echo "::set-output name=processNames::($ProcessNamesArray)"
              
              PackageVersionArray=$(echo $packageVersion)
              echo $PackageVersionArray
              echo "::set-output name=packageVersions::($PackageVersionArray)"
              
              ModeArray=$(echo $mode)
              echo $ModeArray
              echo "::set-output name=modes::($ModeArray)"
              
              DeploymentsArray=$(echo $deploymentID)
              echo $DeploymentsArray
              echo "::set-output name=deploymentIds::($DeploymentsArray)"
 
   getEnvironmentInfo:
     needs: getAPI_Details
     runs-on: ubuntu-latest
     outputs:
       devEnvironmentId: ${{steps.setEnvironmentLevelInfo.outputs.devEnvironmentId}}
       devAtomId: ${{steps.setEnvironmentLevelInfo.outputs.devAtomId}}
       testEnvironmentId: ${{steps.setEnvironmentLevelInfo.outputs.testEnvironmentId}}
       testAtomId: ${{steps.setEnvironmentLevelInfo.outputs.testAtomId}}
     steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - name: Get Environment Info
          uses: actions/checkout@v2
        - id: setEnvironmentLevelInfo
          run: |
              DevEnvironmentDetails=$(cat ./EnvironmentConfiguration/Dev.Env.Config.json)
              devEnvironmentID=$(echo  ${DevEnvironmentDetails} | jq '.[] | .environmentId')
              echo $devEnvironmentID
              echo "::set-output name=devEnvironmentId::$devEnvironmentID"

              devAtomID=$(echo ${DevEnvironmentDetails} | jq '.[] | .atomId')
              echo $devAtomID
              echo "::set-output name=devAtomId::$devAtomID"

              TestEnvironmentDetails=$(cat ./EnvironmentConfiguration/Test.Env.Config.json)
              testEnvironmentID=$(echo  ${TestEnvironmentDetails} | jq '.[] | .environmentId')
              echo $testEnvironmentID
              echo "::set-output name=testEnvironmentId::$testEnvironmentID"

              testAtomID=$(echo ${TestEnvironmentDetails} | jq '.[] | .atomId')
              echo $testAtomID
              echo "::set-output name=testAtomId::$testAtomID"

  
   createPackage:
   
     runs-on: ubuntu-latest   
     outputs:
      packageId: ${{ steps.packageCreation.outputs.packageIds }}
     needs: getAPI_Details
     steps:
        - uses: actions/checkout@v2
        - name: Package Creation

          id: packageCreation
          run: |
                components=${{needs.getAPI_Details.outputs.apiComponentIds}}
                packageVersions=${{needs.getAPI_Details.outputs.packageVersions}}
                modes=${{needs.getAPI_Details.outputs.modes}} 
                fileHoldersName=${{needs.getAPI_Details.outputs.fileHoldersName}}

                if [[ $fileHoldersName == "Ashmita Sawant" ]]
                then
                     apiAuth=$ASHMITA_SAWANT_API_AUTH
                elif [[ $fileHoldersName == "Lalit Karpenter" ]]
                then
                     apiAuth=$LALIT_KARPENTER_API_AUTH
                elif [[ $fileHoldersName == "Kartik Dashora" ]]
                then
                     apiAuth=$KARTIK_DASHORA_API_AUTH
                elif [[ $fileHoldersName == "Lalit Kumawat" ]]
                then
                     apiAuth=$LALIT_KUMAWAT_API_AUTH
                elif [[ $fileHoldersName == "Sanskriti Sharma" ]]
                then
                    apiAuth=$SANSKRITI_SHARMA_API_AUTH
                else
                     apiAuth=null
                fi
                BoomiAccountId=$BOOMI_ACCOUNTID
                echo $BoomiAccountId
                echo $apiAuth
                
                for ((i=0;i<${#components[@]};i++))
                do
                  if [ ${modes[$i]} != "re-deploy" ] && [ ${modes[$i]} != "undeploy" ] && [ ${modes[$i]} != "none" ]
                  then
                      CODE=`curl  --request POST \
                                   --header "authorization: ${apiAuth}" \
                                   --header 'content-type: application/json' \
                                   --header 'accept: application/json' \
                                   --url "https://api.boomi.com/api/rest/v1/${BoomiAccountId}/PackagedComponent" \
                                   --data '{"componentId": "'${components[$i]}'","packageVersion":"'${packageVersions[$i]}'", "notes":"Package for deployment" }'`
                                   echo $CODE
                                   packageIds=$(echo ${CODE} | jq '.packageId')
                                   packageIdsArray+="$packageIds "
                  fi
                done              
                echo "::set-output name=packageIds::$packageIdsArray"

   deployPackage: 
   
     runs-on: ubuntu-latest    
     needs: [createPackage,getAPI_Details,getEnvironmentInfo]
     steps:   
       - uses: actions/checkout@v2
       - name: Package Deploy
         id: packageDeploy
         run: |
               envName=${{needs.getAPI_Details.outputs.environmentName}}
               apiNames=${{needs.getAPI_Details.outputs.apiNames}}
               echo $envName
               echo $apiNames
               modes=${{needs.getAPI_Details.outputs.modes}}
               fileHoldersName=${{needs.getAPI_Details.outputs.fileHoldersName}}
               uniqueKey=${{needs.getAPI_Details.outputs.uniqueKey}}
               echo $uniqueKey
                if [[ $fileHoldersName == "Ashmita Sawant" ]]
                then
                  apiAuth=$ASHMITA_SAWANT_API_AUTH
                  username=$ASHMITA_SAWANT_USERNAME
                  email=$ASHMITA_SAWANT_EMAIL
                elif [[ $fileHoldersName == "Lalit Karpenter" ]]
                then
                     apiAuth=$LALIT_KARPENTER_API_AUTH
                     username=$LALIT_KARPENTER_USERNAME
                     email=$LALIT_KARPENTER_EMAIL
                elif [[ $fileHoldersName == "Kartik Dashora" ]]
                then
                     apiAuth=$KARTIK_DASHORA_API_AUTH
                     username=$KARTIK_DASHORA_USERNAME
                     email=$KARTIK_DASHORA_EMAIL
                elif [[ $fileHoldersName == "Lalit Kumawat" ]]
                then
                     apiAuth=$LALIT_KUMAWAT_API_AUTH
                     username=$LALIT_KUMAWAT_USERNAME
                     email=$LALIT_KUMAWAT_EMAIL
                elif [[ $fileHoldersName == "Sanskriti Sharma" ]]
                then
                     apiAuth=$SANSKRITI_SHARMA_API_AUTH
                     username=$SANSKRITI_SHARMA_USERNAME
                     email=$SANSKRITI_SHARMA_EMAIL
                else 
                     apiAuth=null
                     username=null
                     email=null
                fi
                BoomiAccountId=$BOOMI_ACCOUNTID
                echo $BoomiAccountId
                echo $apiAuth
                echo $username
                echo $email
               
                if [ ${modes[$i]} == "deploy" ]
                then 
                  packageIds=(${{needs.createPackage.outputs.packageId}})
                else
                  ProcessDetails=$(cat ./APIDeploymentConfiguration/ApiDetails.${uniqueKey}.dev.json)
                  packages=$(echo ${ProcessDetails} | jq '.[] | .processDetails[].packageId')
                  packageIds=($packages)
                fi
                echo $packageIds
                echo "Index 0 value:" ${packageIds[0]} 
                
                 for ((i=0;i<${#packageIds[@]};i++))
               do
                 componentName=${apiNames[$i]}
                 echo $componentName
                 if [ $envName == "Development" ] && [ ${modes[$i]} == "deploy" ] 
                 then
                     envId=${{needs.getEnvironmentInfo.outputs.devEnvironmentId}}
                     CODE=`curl  --request POST \
                               --header "authorization: ${apiAuth}" \
                               --header 'content-type: application/json' \
                               --header 'accept: application/json' \
                               --url "https://api.boomi.com/api/rest/v1/${BoomiAccountId}/DeployedPackage" \
                               --data '{"environmentId": "'$envId'","packageId": "'${packageIds[$i]}'"}'`
                             
                               echo $CODE 
                               outcome='{
                                        "deployedDatetime": '"$(echo ${CODE} | jq '.deployedDate')"',
                                        "details": 
                                         {
                                          "componentName": "'$componentName'",
                                          "componentId": '"$(echo ${CODE} | jq '.componentId')"',
                                          "packageVersion": '"$(echo ${CODE} | jq '.packageVersion')"',
                                          "packageId": '"$(echo ${CODE} | jq '.packageId')"',
                                          "deploymentId": '"$(echo ${CODE} | jq '.deploymentId')"',
                                          "componentVersion": '"$(echo ${CODE} | jq '.componentVersion')"',
                                          "environmentId": '"$(echo ${CODE} | jq '.environmentId')"'
                                         }
                                       }'
                                       
                               rollback='{
                                           "componentName": "'$componentName'",
                                           "componentId": '"$(echo ${CODE} | jq '.componentId')"',
                                           "packageId": '"$(echo ${CODE} | jq '.packageId')"'
                                         }'
                         echo $rollback, >>  APIsDeploymentOutcomeDev/"$uniqueKey".Dev.Rollback.json             
                         echo $outcome, >> APIsDeploymentOutcomeDev/"$uniqueKey".Dev.Outcome.json
                                     git config user.name $username
                                     git config user.email $email
                                     git add .
                                     git commit -m "Published Changes"
                                     git config pull.rebase false
                                     git push --force origin main                 
                   
