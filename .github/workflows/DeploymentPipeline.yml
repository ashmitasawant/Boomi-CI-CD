name: Deployment Pipeline

on:
  push:
    paths:
     - 'DeploymentConfiguration/*'
  workflow_dispatch:

jobs:
  getEnvironmentInfo:
   runs-on: ubuntu-latest
   outputs:
     devEnvironmentId: ${{steps.setEnvironmentLevelInfo.outputs.devEnvironmentId}}
     devAtomId: ${{steps.setEnvironmentLevelInfo.outputs.devAtomId}}
     testEnvironmentId: ${{steps.setEnvironmentLevelInfo.outputs.testEnvironmentId}}
     testAtomId: ${{steps.setEnvironmentLevelInfo.outputs.testAtomId}}
   steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Process Info
        uses: actions/checkout@v2
      - id: setEnvironmentLevelInfo
        run: |
            DevEnvironmentDetails=$(cat ./EnvironmentConfiguration/Dev.Env.Config.json)
            devEnvironmentID=$(echo  ${DevEnvironmentDetails} | jq '.[] | .environmentId')
            echo $devEnvironmentID
            echo "::set-output name=devEnvironmentId::$devEnvironmentID"
            
            devAtomID=$(echo ${DevEnvironmentDetails} | jq '.[] | .atomId')
            echo $devAtomID
            echo "::set-output name=devAtomId::$devAtomID"
            
            TestEnvironmentDetails=$(cat ./EnvironmentConfiguration/Test.Env.Config.json)
            testEnvironmentID=$(echo  ${TestEnvironmentDetails} | jq '.[] | .environmentId')
            echo $testEnvironmentID
            echo "::set-output name=testEnvironmentId::$testEnvironmentID"
            
            testAtomID=$(echo ${TestEnvironmentDetails} | jq '.[] | .atomId')
            echo $testAtomID
            echo "::set-output name=testAtomId::$testAtomID"
  
  deployments:
    environment: Dev
    env: 
      BOOMI_AUTHORIZATION: ${{ secrets.BOOMI_AUTHORIZATION }}
    runs-on: ubuntu-latest
    steps:
      - name: Package Creation and Deployment 
        uses: actions/checkout@v2
      - id: setProcessLevelInfo
        run: |
            ProcessDetails=$(cat ./DeploymentConfiguration/ProcessDetails.HX_Demo.dev.json)
            echo $ProcessDetails
            listFiles=$(ls DeploymentConfiguration/)
            echo $listFiles
            
            for i in $listFiles
            do
              readFiles=$(cat ./DeploymentConfiguration/$i)
              echo $readFiles
              
              environmentNames=$(echo ${readFiles} | jq '.[] | .environmentName')
              processNames=($(echo ${readFiles} | jq '.[] | .processDetails[].processName'))
              componentIDs=($(echo  ${readFiles} | jq '.[] | .processDetails[].componentID'))
              packageVersions=($(echo  ${readFiles} | jq '.[] | .processDetails[].packageVersion'))
              modes=($(echo  ${readFiles} | jq '.[] | .processDetails[].mode'))
              deploymentIDs=($(echo  ${readFiles} | jq '.[] | .processDetails[].deploymentID'))
              echo $environmentNames
              echo $processNames
              echo $componentIDs
              echo $packageVersions
              echo $modes
              echo $deploymentIDs
              
                for ((j=0;j<${#componentID[@]};j++))
                do
                    if [ ${modes[$j]} != "re-deploy" ] && [ ${modes[$j]} != "undeploy" ] && [ ${modes[$j]} != "none" ]
                    then
                        CODE=`curl  --request POST \
                                     --header 'authorization: ${{env.BOOMI_AUTHORIZATION}}' \
                                     --header 'content-type: application/json' \
                                     --header 'accept: application/json' \
                                     --url 'https://api.boomi.com/api/rest/v1/trainingashmitasawant-D9P8J7/PackagedComponent' \
                                     --data '{"componentId": "'${componentID[$j]}'","packageVersion":"'${packageVersions[$j]}'", "notes":"Package for deployment" }'`
                                     echo $CODE
                                     packageIds=$(echo ${CODE} | jq '.packageId')
                                     packageIdsArray+="$packageIds "
                    fi
                done      
            done
